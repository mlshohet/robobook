{"version":3,"sources":["components/CounterButton.jsx","components/Header.jsx","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Clock.jsx","constants.js","containers/App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","Component","Header","className","Card","name","email","alt","src","CardList","robots","map","robot","i","SearchBox","searchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","hasError","error","info","Clock","clock","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","fetch","then","response","json","datetime","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","ispending","dispatch","event","text","target","value","payload","data","catch","initialState","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9509fcd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t}\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tif (this.state.count !== nextState.count) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tupdateCount = () => {\n\t\tthis.setState(state => {\n\t\t\treturn {count: this.state.count + 1}\n\t\t});\n\t}\n\n\trender() {\n\t\tconsole.log('CounterButton');\n\t\treturn (\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\n\t\t\tCount : {this.state.count}\n\t\t\t</button>\n\t\t)\n\t}\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn false;\n\t}\n\n\n\trender() {\n\t\tconsole.log('Header');\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t\n\t\t\t\t<h1 className='tc f1'>ROBOBOOK</h1>\n\t\t\t\t<CounterButton color={'red'} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;","import React from 'react';\n\nconst Card = ({name, email }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${name}?size=200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div> {\n\t\t\trobots.map((robot,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchBox, searchChange}) => {\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\taria-label='Search Robots'\n\t\t\t\tclassName = 'pa3 mb2'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', height: '500px' }}>\n\t\t\t{ props.children }\n\t\t</div>\n\t\t)\n\t}\t\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn<h1>Oops, there was an error</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Clock = ({clock}) => {\n\treturn (\n\t\t<div className='tc ma2'>\n\t\t\t<h1>{clock}</h1>\n\t\t</div>\n\t\t)\n}\n\nexport default Clock;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","import React from 'react';\n\n// Importing connect function, because App is smart container and needs to subscribe\n// - Look to bottom for syntax\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Clock from '../components/Clock';\nimport './App.css';\n\n// Importing the actions for redux\nimport { setSearchField, requestRobots } from '../actions';\n\n\n// The dispatch that App listens to\n// the variable that's passed to the bottom function\n// the searchField  property of the state in the 'searchRobots' reducer\n// this is used as props\n\n//*** Declares what piece of state to listen to***//\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t//The reducers and properties have to be specified here\n\t\tsearchField: state.searchRobots.searchField, //This is the property from object that the reducer returns\n\t\trobots: state.requestRobots.robots,\n\t\tispending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\n//*** What props to listen to that are actions ***//\n\n// Receives a dispatch (an action trigger) so the action can be sent\n// into the reducer.\n// Property is the prop that that the dispatch receives\n// value is a function that listens for input (in this case)\n// Returns an Object that contains all of the action\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\n\t\t// returns the specific reducer function that has a dispatch\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tclock: ''\n\t\t}\n\t}\n\n//No constructor. All data received as props from redux\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t\tfetch('http://worldtimeapi.org/api/ip')\n\t\t.then(response => {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(clock => {\n\t\t\tconst datetime = clock.datetime;\n\t\t\tthis.setState({ clock: datetime })\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, isPending, robots } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\treturn isPending\n\t\t? <h1 className = 'tc'>LOADING...</h1>\n\t\t: (\n\t\t\t<div className = 'tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange = {onSearchChange} />\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots= {filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t<Clock clock={this.state.clock}/>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\n// Higher order function connect\n// App subscribes to any changes in redux store\n// THIS IS THE SUBSCRIPTION DECLARATION TO REDUX STATE MANAGEMENT\n// Look above for which actions and which props App is subscribed to\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","import {\n\t\tCHANGE_SEARCH_FIELD,\n\t\tREQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED\n\t\t} from './constants';\n\n\nexport const setSearchField = text => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\n\n// Use dispatch to gain the action\n// no payload\n//Also async call goes here as an action\n//***  This is ASYNC API call technique for redux ***///\n// Higher order function for THUNK\nexport const requestRobots = () => dispatch => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t// Dispatches the data from API to redux according to action type, payload is here\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\n}\n\n\n\n\n","// Import the action type to be used by reducer\nimport {\n\t\tCHANGE_SEARCH_FIELD,\n\t\tREQUEST_ROBOTS_PENDING,\n\t\tREQUEST_ROBOTS_SUCCESS,\n\t\tREQUEST_ROBOTS_FAILED\n\t} from './constants';\n\n\n// Initial state for the Search box\nconst initialState = {\n\tsearchField: ''\n}\n\n// Initial state for the robot API call\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\n// Reducer for the Search Box\n// Receives an action and then acts upon the state\nexport const searchRobots = (state=initialState, action={}) => {\n\t//Redux receommends 'switch' not if\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t// Return new state if action is of the above type\n\t\t// Create a new state object with the modifications\n\t\t// action is an object with payload as property\n\t\t// Standard Redux syntax\n\t\t// Third parameter is the state object\n\t\t\treturn { ...state, searchField : action.payload }\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n// Reducer for the fetch of robots (ASYNC)\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending : true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots : action.payload, isPending : true });\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error : action.payload, isPending : false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Provider component from redux to pass the store, so it is hidden from App\nimport { Provider } from 'react-redux';\n\n// create store creates the app store from redux package\nimport { createStore, combineReducers } from 'redux';\n\n\n// Redux Middleware\nimport { createLogger } from 'redux-logger';\nimport { applyMiddleware } from 'redux';\n\n// Thunk for async calls\n\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\n\n// Must import reducers from the reducers file\nimport { searchRobots, requestRobots } from './reducers';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\n// Creating the Redux store\n// store is a big object containing the state\n// All reducers are combined here into the root reducer\n// also creates middleware (logger here)\n// Add all reducers here (COMBINE into root reducer)\n\nconst rootReducer = combineReducers( { searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n\n // This is how the react-redux Provider passes down the store, not the App\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    \t<App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}